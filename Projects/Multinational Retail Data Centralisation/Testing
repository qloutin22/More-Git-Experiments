import yaml
from yaml.loader import SafeLoader
from sqlalchemy import create_engine,MetaData,Table
import pandas as pd

class DatabaseConnector():
   @staticmethod
   def read_db_creds():
     with open(r'C:\Users\quann\OneDrive\Desktop\Data Engineering\Projects\Multinational Retail Data Centralisation\db_creds.yaml', 'r') as file:
       db_creds = yaml.load(file, Loader = SafeLoader)
       return db_creds

   @staticmethod
   def init_db_engine():
     db_credentials = DatabaseConnector.read_db_creds()
     db_url = f"postgresql://{db_credentials['RDS_USER']}:{db_credentials['RDS_PASSWORD']}@{db_credentials['RDS_HOST']}:{db_credentials['RDS_PORT']}/{db_credentials['RDS_DATABASE']}"
     engine = create_engine(db_url)
     return engine

   @staticmethod
   def list_db_tables():
    engine = DatabaseConnector.init_db_engine()
    metadata = MetaData()
    metadata.reflect(bind=engine)
    table_names =  metadata.tables.keys()
    return table_names

   @staticmethod
   def read_rds_table(table_name):
        engine = DatabaseConnector.init_db_engine()
        metadata = MetaData()
        metadata.reflect(bind=engine)
        if table_name in list(metadata.tables):
            table = Table(table_name, metadata, autoload_with=engine)
            return pd.read_sql_table(table_name, engine)
        else:
            print(f"Table '{table_name}' does not exist.")
            return None
    # Handle the case if the table_name does not exist

   @staticmethod
   def clean_user_data(user_data):
        #user_data = user_data.dropna()
        user_data['date_column'] = pd.to_datetime(user_data['date_column'], errors='coerce')
        user_data['age'] = pd.to_numeric(user_data['age'], errors='coerce')
        user_data = user_data[user_data['age'] > 0]
        return user_data

   @staticmethod
   def upload_to_db(self, df, table_name):
    self.engine = self.init_db_engine()  # Initialize the database engine
    df.to_sql(table_name, con=self.engine, if_exists='replace', index=False)
    print(f"Uploaded DataFrame to '{table_name}' table in the database.")



#engine = db.init_db_engine()
#print("Database Engine:", engine)

#if __name__ == "__main__":
   # tables = db.list_db_tables()
    #print("List of tables:", tables)
 
#if __name__ == "__main__":
   # table_name_to_read = 'orders_table'
   # table_reader = db.read_rds_table(table_name_to_read)
    #if table_reader is not None:
        #print(f"DataFrame for '{table_name_to_read}':")
        #print(table_reader)


table_name = db.list_db_tables()
user_data =  db.clean_user_data(table_name) 
#clean_data = DatabaseConnector.clean_user_data(user_data)
#print(clean_data)

 

 

cleaned_user_data = db.clean_user_data(user_data)

table_name = 'dim_users'

db.upload_to_db(cleaned_user_data, table_name)

"""Pandas DataFrame and table name to upload to as an argument."""


